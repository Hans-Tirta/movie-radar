// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Discussion {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  DiscussionCategory @default(GENERAL)
  movieId   Int
  userId    String

  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments  Comment[]
  votes     DiscussionVote[]

  @@map("Discussion")
}

model Comment {
  id           String   @id @default(cuid())
  content      String
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  userId       String

  parentId     String?
  parent       Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[] @relation("CommentReplies")

  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  votes        CommentVote[]

  @@map("Comment")
}


model DiscussionVote {
  id           String     @id @default(cuid())
  userId       String
  discussionId String
  voteType     VoteType   // UPVOTE or DOWNVOTE
  createdAt    DateTime   @default(now())
  
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  
  // Prevent duplicate votes from same user
  @@unique([userId, discussionId])
  @@map("DiscussionVote")
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  voteType  VoteType // UPVOTE or DOWNVOTE
  createdAt DateTime @default(now())
  
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Prevent duplicate votes from same user
  @@unique([userId, commentId])
  @@map("CommentVote")
}

enum DiscussionCategory {
  GENERAL
  OFF_TOPIC
  TECHNICAL
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}